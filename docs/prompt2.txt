Desarrolla una herramienta con las siguientes características:

1.  Lenguaje: Python (>= 3.8 preferiblemente). Utilizar bibliotecas estándar como `json` y `argparse`. Se pueden considerar bibliotecas de terceros como `click` para una CLI más avanzada si se prefiere, pero `argparse` es suficiente.
2.  Interfaz: CLI (Línea de comandos).
3.  Objetivo: Convertir eficientemente archivos entre el formato JSON Lines (JSONL) y el formato JSON estándar (específicamente, un array de objetos JSON). Automatiza la transformación común necesaria para procesar logs, datasets o intercambiar datos entre sistemas con diferentes convenciones JSON.
    Funcionalidad Clave 1 (JSONL a JSON):
        Entrada: Un archivo de texto donde cada línea es un objeto JSON válido (formato JSONL).
        Salida: Un único archivo JSON que contiene un array `[...]`, donde cada elemento del array es un objeto JSON de una línea del archivo de entrada.
    Funcionalidad Clave 2 (JSON a JSONL):
        Entrada: Un archivo JSON estándar cuyo contenido principal sea un array `[...]` de objetos JSON.
        Salida: Un archivo de texto donde cada línea contiene la representación JSON de un objeto del array de entrada (formato JSONL).
    Otras Funcionalidades: Manejo de errores para archivos no encontrados, JSON inválido en líneas (para JSONL a JSON) o JSON inválido general/no es un array (para JSON a JSONL). Considerar el manejo eficiente de archivos grandes (lectura/escritura por streaming si es posible).
4.  Estructura: Utilizar un layout estándar de Python con un directorio `src/` para el código fuente principal. Incluir archivos básicos como `setup.py` o `pyproject.toml` para la gestión de paquetes/dependencias y tests (e.g., en un directorio `tests/`).
5.  Arquitectura: Priorizar interfaces limpias, código modular, mantenible y testeable. Separar claramente responsabilidades:
    Módulo para la lógica de parsing/conversión JSONL <-> JSON.
    Módulo para el manejo de archivos (I/O).
    Módulo para la interfaz de línea de comandos (usando `argparse` o similar).
6.  Parámetros CLI Mínimos: Se recomienda usar subcomandos para cada tipo de conversión (más claro que un flag `--mode`).
    Subcomando `to-json`:
        `--input` / `-i`: (Requerido) Ruta al archivo JSONL de entrada.
        `--output` / `-o`: (Requerido) Ruta al archivo JSON de salida.
    Subcomando `to-jsonl`:
        `--input` / `-i`: (Requerido) Ruta al archivo JSON (con array) de entrada.
        `--output` / `-o`: (Requerido) Ruta al archivo JSONL de salida.
    Opciones Globales:
        `--version`: Muestra la versión de la herramienta.
        `--help` / `-h`: Muestra la ayuda para la herramienta o subcomando específico.
    Implementar validación robusta de argumentos (existencia de archivos de entrada, permisos, etc.) y manejo de errores con mensajes claros para el usuario.